FORMAT: 1A
HOST: http://polls.apiblueprint.org/

# UTabAPIs

By which you can operate UTab  (Todo: backup, import)

Version: v0.1

speaker, institution -> team

institution -> adjudicator

## Verification [/v0.1/{tournament_name}/verify]

+ Parameters
    + tournament_name (required, string, `test`)
    
### Send Verification Code [PUT]

+ Request (application/json)

        {
            "errors": null,
            "data":
            {
                "name": name,
                "pass": pass
            }
        }
        
+ Response 200 (application/json)
        
        {
            "errors": null,
            "user_code": user_code /* Random Hash given by Server, neccesary for using APIs*/
        }

+ Response 403 (application/json)
    
        {
            "errors": [
                {
                    "statusCode": status_code,    /*ex)0 the error type code which is unique to each errors <Integer, required> */
                    "statusText": "status_text",  /*ex)Unauthorized one-line description of the error type <String, required> */
                    "message": message,    /*ex)"We are sorry, but your id or password is incorrect." Supporting message usually shown to end-users <String, optional> */
                    "from": from /*ex)"verification" where the error occurs <String, optional> */
                }
            ],
            "data": null
        }
        
## Tournaments [/v0.1/tournaments]

### List All Tournaments [GET]

+ Response 200 (application/json)

        {
            "errors": null,
            "data": 
            {
                "tournament_num": 1,
                "tournaments": [
                    {
                        "name": "test%20tournament",
                        "num_of_rounds": 3,
                        "style": "PDA",
                        "url": "www.google.com"
                    }
                ]
            }
        }

### New Tournament [POST]

+ Request (application/json)
        
        {
            "name": "test%20tournament",
            "num_of_rounds": 3,
            "style": "PDA",
            "url": ""
        }
        
+ Response 200 (application/json)

        {
            "errors": null
            "data":
            {
                "id": 0,
                "name": "test%20tournament",
                "num_of_rounds": 3,
                "style": "PDA"
            }
        }
        
### Delete Tournament [DELETE]

+ Request (application/json)
        
        {
            "id": 0,
            "name": "test%20tournament"
        }
        
+ Response 200 (application/json)

        {
            "errors": null
            "data":
            {
                "id": 0,
                "name": "test%20tournament",
                "num_of_rounds": 3,
                "style": "PDA",
                "url": "http://www.google.com"
            }
        }
        
## Available Styles [/v0.1/styles]

### List All Styles [GET]

+ Response 200 (application/json)

        {
            "error": null,
            "data": [
                {
                    "style_name": "PDA",
                    "debater_num_per_team": 4,
                    "team_num": 2,
                    "score_weights": [1,1,1,0.5],
                    "replies": [0,1],/* replier candidates. if 2nd speaker does reply, 1 */
                    "num_of_replies_per_team": 1
                }
            ]
        }

### Add An User Defined Style [PUT]

+ Request (application/json)

        {
            "style_name": "PDA",
            "debater_num_per_team": 4,
            "team_num": 2,
            "score_weights": score_weights,
            "replies": replies,
            "num_of_replies_per_team": 1
        }
        
+ Response 200 (application/json)

        {
            "error": null,
            "data":
            {
                "style_name": "PDA",
                "debater_num_per_team": 4,
                "team_num": 2,
                "score_weights": score_weights,
                "replies": replies, /* list of Integers. 1 if his/her role is reply */
                "num_of_replies_per_team": 1
            }
        }
        
## Specific Tournament [/v0.1/{tournament_name}]

### Fetch Data [GET]

+ Request (application/json)

        {
        }
        
+ Response 200 (application/json)

        {
            "error": null,
            "data":
            {
                "id": id,
                "name": name,
                "style": style,
                "host": host,
                "pre_rounds": pre_rounds,
                "break_rounds": break_rounds,
                "current_round": current_round
        }
        
### Set Judge Criterion [PUT]

+ Request (application/json)
    
        [
            {
                "judge_test":100,
                "judge_repu_percent":0,
                "judge_perf_percent":0
            }
        ]
        
+ Response 200 (application/json)

        {
            "errors":null,
            "data":null
        }

### Revise Data [PATCH]
        
+ Request (application/json)

        {
            "error": null,
            "data":
            {
                "id": id,
                "name": name,
                "style": style,
                "host": host,
                "pre_rounds": pre_rounds,
                "break_rounds": break_rounds
        }

+ Response 200 (application/json)

        {
        }
        
## Round [/v0.1/{tournament_name}/{round_num}]

### Get Round Information [GET]

+ Response 200 (application/json)

        {   
            "errors":null
            "data":
            {
                "round_num": 1,
                "status": 0, /*0:you can edit adj, team, venue, insti 4:results collected*/
                "constants":
                [
                    {
                        "random_pairing":4,
                        "des_power_pairing":1,
                        "des_w_o_same_a_insti":2,
                        "des_w_o_same_b_insti":0,
                        "des_w_o_same_c_insti":0,
                        "des_with_fair_sides":1 /*property: preference(1 = most preferred)*/
                    }
                ],
                "constants_of_adj":
                [
                    {
                        "random_allocation":4,
                        "des_strong_strong":2,
                        "des_with_fair_sides":3,
                        "des_avoiding_conflicts":1,
                        "des_avoiding_past":0,
                        "des_priori_bubble":0,
                        "des_chair_rotation":0,
                    }
                ]
            }
        }
        
### Send Round Config [PUT]

+ Request (application/json)

        {
            "constants": (defined above),
            "constants_of_adj": null
        }
        
+ Response 200 (application/json)

        {
            "errors": null,
            "data":
            {
                "constants": (defined above),
                "constants_of_adj": null
            }
        }
        
### Proceed Round [POST]

+ Request (application/json)
        
        {   
            "proceed": True /*Boolean*/
            "force_proceed": False /*Boolean. With false, you cannot proceed to next round until all results are collected*/
        }
        
+ Response 200 (application/json)

        {
            "error": null,
            "data": 
            {
            }
        ]
    
## All Candidate Matchups [/v0.1/{tournament_name}/{round_num}/control/matchups]

+ Parameters
    + tournament_name (required, string, `test`)
    + round_num (required, number, `1`)
    
### Get All Candidate Matchups [GET]
    
+ Response 200 (application/json)

        {
        }
        
## Selecting Matchups [/v0.1/{tournament_name}/{round_num}/control/matchups/{matchup_id}]

### Get Specified Candidate Matchup [GET]
    
+ Response 200 (application/json)

        {
            "errors": null,
            "data":
            [[team_id1, team_id2]]
        }
        

### Exchange Teams [PATCH]

+ Request (application/json)
        
        {
        }
        
+ Response 200 (application/json)

        {
        }
        
### Confirm Arranged Matchup [POST]

+ Request (application/json)
        
        {
        }
        
+ Response 200 (application/json)

        {
        }
        
## All Candidate Allocations [/v0.1/{tournament_name}/{round_num}/control/allocations]

### Get All Candidate Allocations [GET]

+ Response 200 (application/json)

        {
        }
        
## Selecting Allocations [/v0.1/{tournament_name}/{round_num}/control/allocations/{allocation_id}]

### Get Specified Candidate Allocation [GET]

+ Response 200 (application/json)

        {
        }

### Exchange Adjudicators [PATCH]

+ Request (application/json)
        
        {
        }

+ Response 200 (application/json)

        {
        }

### Select Allocation [POST]

+ Request (application/json)
        
        {
        }

+ Response 200 (application/json)

        {
        }

## Allocating Panels [/v0.1/{tournament_name}/{round_num}/control/panels]

### Get Candidate Panel Allocation [GET]

+ Response 200 (application/json)

        {
        }

### Exchange Panels [PATCH]

+ Request (application/json)
        
        {
        }

+ Response 200 (application/json)

        {
        }

### Approve Panel Allocation [POST]

+ Request (application/json)
        
        {
        }

+ Response 200 (application/json)

        {
        }

## Selecting Venues [/v0.1/{tournament_name}/{round_num}/control/venues]

### Get Venue Allocation [GET]

+ Response 200 (application/json)

        {
        }

### Exchange Venues [PATCH]

+ Request (application/json)
        
        {
        }

+ Response 200 (application/json)

        {
        }

### Approve Venue Allocation [POST]

+ Request (application/json)
        
        {
        }

+ Response 200 (application/json)

        {
        }
        
## Adjudicators [/v0.1/{tournament_name}/adjudicators]

### List All Adjudicators [GET]

+ Response 200 (application/json)

        {
            "hello": adjudicator_id
        }

### Add An Adjudicator [POST]

+ Request (application/json)
        
        {
        }
        
+ Response 200 (application/json)
    
        {
        }
        
### Delete An Adjudicator [DELETE]

+ Request (application/json)
        
        {
        }
        
+ Response 200 (application/json)
    
        {
        }

## Specific Adjudicator [/v0.1/{tournament_name}/adjudicators/{adjudicator_id}]

### Get Specific Adjudicator [GET]

+ Response 200 (application/json)

        {
            "id": adjudicator_id,
            "name": adjudicator_name,
            "available": adjudicator_available,
            "instutituions": [institution],
            "conflicts": [team],
            "url": adjudicator_url
        }

### Modify Adjudicator [PUT]

+ Request (application/json)
        
        {
        }

+ Response 200 (application/json)

        {
            "hello": adjudicator_id
        }
        
## Teams [/v0.1/{tournament_name}/teams]

### List All Teams [GET]

+ Response 200 (application/json)

        {
        }

### Add A Team [POST]

+ Request (application/json)

        {
        }

+ Response 200 (text/plain)

        "Thank you"
        
### Delete Team [DELETE]

+ Request (application/json)

        {
            "question": "Favourite programming language?",
            "choices": [
                "Swift",
                "Python",
                "Objective-C",
                "Ruby"
            ],
            "test": [
                "hi",
                "hello"
            ]
        }

+ Response 200 (application/json)

        {
            "hello": team_id
        }
        
## Specific Team [/v0.1/{tournament_name}/teams/{team_id}]

### View Specific Team [GET]

+ Response 200 (application/json)

        {
            "id": id,
            "name": team_name,
            "speakers": [speaker],
            "available": team_available,
            "url": team_url
        }
        
### Modify Team [PATCH]
        
+ Request (application/json)

        {
            "question": "Favourite programming language?",
            "choices": [
                "Swift",
                "Python",
                "Objective-C",
                "Ruby"
            ],
            "test": [
                "hi",
                "hello"
            ]
        }

+ Response 200 (application/json)

        {
            "hello": team_id
        }
        
## Venues [/v0.1/{tournament_name}/venues]

### List All Venues [GET]

+ Response 200 (application/json)

        {
            "errors": null,
            "data":
            {
                [venue]
            }
        }

### Add A Venue [PUT]

+ Request (application/json)
        
        {
        }
        
+ Response 200 (application/json)
    
        {
        }
        
### Delete A Venue [DELETE]

+ Request (application/json)
        
        {
        }
        
+ Response 200 (application/json)
    
        {
        }

## Specific Venue [/v0.1/{tournament_name}/venues/{venue_id}]

### Get Specific Venue [GET]

+ Response 200 (application/json)

        {
            "errors": null,
            "data":
            {
                "id": venue_id,
                "name": venue_name,
                "available": available,
                "priority": priority,
                "url": venue_url
            }
        }

### Modify Venue's Status [PUT]

+ Request (application/json)
        
        {
        }

+ Response 200 (application/json)

        {
            "hello": adjudicator_id
        }
        
## Institutions [/v0.1/{tournament_name}/institutions]

### List All Institutions [GET]

+ Response 200 (application/json)
        
        {
        }
        
### Add An Institution [POST]

+ Request (application/json)
        
        {
        }

+ Response 200 (application/json)

        {
        }
        
### Delete An Institution [DELETE]

+ Request (application/json)
        
        {
        }

+ Response 200 (application/json)

        {
        }
       
## Specific Institution [/v0.1/{tournament_name}/institutions/{institution_id}]
  
### Get Institution's Information [GET]

+ Response 200 (application/json)
        
        {
            "id": institution_id,
            "name": institution_name,
            "url": institution_url,
            "teams": [team],
            "adjudicators": [adjudicator]
        }  
      
### Modify Institution [PATCH]

+ Request (application/json)
        
        {
        }

+ Response 200 (application/json)

        {
        }
        
## Team Results [/v0.1/{tournament_name}/{round_num}/results/teams]

### List Team Results [GET]

+ Response 200 (application/json)

        [
            {
                "team_id": 3,
                "team_name": KYM1,
                "win": 1 /* when in BP win must be points(0, 1, 2, 3), when in NA win points be (0, 1:win)*/
            }
        ]
        
## Speaker Results [/v0.1/{tournament_name}/{round_num}/results/speakers]

### List Speaker Results [GET]

+ Response 200 (application/json)

        [
            speaker_result(defined below)
        ]
        
### Send Speaker Result [PUT]

+ Request (application/json)
        
        {
            "errors": null,
            "round": 1,/* round1 => 1 */
            "data":
            {
                "team_id": team_id,
                "id": id,
                "points": ::[Float], /* 0 if he/she has no role */
                "win": ::Bool /* True if win else False */,
                "opponent_team_id": opponent_team_name,
                "side": ::String /* in BP, "og", "oo", "cg", "co". in 2side game, "gov", "opp"
            }
        }
        
+ Response 200 (application/json)
    
        {
        }
        
+ Response 400 (application/json)

        {
        }
        
## Adjudicator Results [/v0.1/{tournament_name}/{round_num}/results/adjudicators]

### List Adjudicator Results [GET]

+ Response 200 (application/json)

        {
            "errors": null,
            "data": undef
        }
        
### Send Adjudicator Result [PUT]

+ Request (application/json)
        
        {
            "errors": null,
            "round": 1,/* round1 => 1 */
            "data":
            {
                "from": "chair", /* "chair", "panel", or "team" */
                "from_id": 34, /* sender's id */
                "from_name": "KOYAMAR", /* sender's name */
                "chair": True,
                "adj_id": adj_id, /* id of adj to be evaluated */
                "point": 8,
                "team_ids": ::[Integer], /* teams' ids that the adj judged (必要?) */
                "comment": "worst judge ever"
            }
        }
        
+ Response 200 (application/json)
    
        {
            "errors": null,
            "data" : null
        }
        
## Backups [/v0.1/{tournament_name}/backups]

### List All Available Backups [GET]

+ Response 200 (application/json)
        
        {
            "errors":null,
            "data":
            [
                {
                    "date": "2016/01/04-23:59:10",
                    "comment": "test",
                    "backup_code": "fda23fds",
                    "round_num": 1 /* in which the backup is made */
                }
            ]
        }

### Back to Particular Point [PUT]

+ Request (application/json)
        
        {
            "errors": null,
            "data":
            {
                "backup_code": "fda23fds"
            }
        }
        
+ Response 200 (application/json)
    
        {
            "errors": null,
            "data": null
        }

### Save Current State [POST]

+ Request (application/json)
        
        {
            "errors": null,
            "data":
            {
                "comment": "backupthis"
            }
        }
        
+ Response 200 (application/json)
        
        {
            "errors":null,
            "data":
            [
                {
                    "date": "2016/01/04-23:59:10",
                    "comment": "test",
                    "backup_code": "fda23fds"
                }
            ]
        }
        
## Historical Team Results [/v0.1/{tournament_name}/results/adjudicators]
        
## Historical Adjudicator Results [/v0.1/{tournament_name}/results/teams]