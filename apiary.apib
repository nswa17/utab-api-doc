FORMAT: 1A
HOST: http://polls.apiblueprint.org/

# UTabAPIs

By which you can operate UTab  (Todo: backup, import)

Version: v0.1

speaker, institution -> team

institution -> adjudicator

Get -> GET
Create -> POST(force=false)
Create/Update-if-exist -> PUT
Update -> PATCH
Delete -> DELETE

<!-- 大会い自体のurl -->

## Verification

## Tournaments [/v0.1/tournaments]

### List All Tournaments [GET]

+ Response 200 (application/json)

        {
            "errors": null,
            "data":{
                "tournaments":
                    [
                        {
                            "name": "test tournament",
                            "num_of_rounds": 3,
                            "style": "PDA",
                            "url": "www.goodtournament.com",
                            "judge_criterion":[
                                {
                                    "judge_test_percent":100,
                                    "judge_repu_percent":0,
                                    "judge_perf_percent":0
                                }
                            ]
                        }
                    ],
                "resource_url":"/v0.1/tournaments"
            }
        }

## Specific Tournaments [/v0.1/{tournament_name}]

+ Parameters
    + tournament_name (required, string, `test`)

### Get Tournament [GET]

+ Response 200 (application/json)

        {
            "errors": null,
            "data": {
                "tournament":
                    {
                    "url": "/v0.1/test%20tournament"
                    "id": 0,
                    "name": "test%20tournament",
                    "style": "PDA",
                    "host": "Great TD",
                    "judge_criteria": {
                        "judge_test_percent":100,
                        "judge_repu_percent":0,
                        "judge_perf_percent":0
                    },
                "resource_url":""
            }
        }

### Create Tournament [POST]

+ Request (application/json)

        {
            "args": {
              "force": false
            },
            "data": 
            {
                "name": "test%20tournament",
                "style": "PDA",
                "host": "Great TD",
                "judge_criteria": {
                    "judge_test_percent":100,
                    "judge_repu_percent":0,
                    "judge_perf_percent":0
                }
            }
        }

+ Response 200 (application/json)

        {
            "errors": null
            "data":
            {
                "tournament":
                {
                    "url": "/v0.1/test%20tournament"
                    "id": 0,
                    "name": "test%20tournament",
                    "style": "PDA",
                    "host": "Great TD",
                    "judge_criteria": {
                        "judge_test_percent":100,
                        "judge_repu_percent":0,
                        "judge_perf_percent":0
                },
                "resource_url": ""
            }
        }

### Create/Update Tournament [PUT]

+ Request (application/json)

        {
            "name": "test%20tournament",
            "style": "PDA",
            "host": "Great TD",
            "judge_criteria": {
                "judge_test_percent":100,
                "judge_repu_percent":0,
                "judge_perf_percent":0
            }
        }

+ Response 200 (application/json)

        {
            "errors": null
            "data":
            {
                "tournament":
                {
                    "url": ""
                    "id": 0,
                    "name": "test%20tournament",
                    "style": "PDA",
                    "host": "Great TD",
                    "judge_criteria": {
                        "judge_test_percent":100,
                        "judge_repu_percent":0,
                        "judge_perf_percent":0
                    }
                },
                "resource_url": "/v0.1/tournaments"
        }

### Update Tournament [PATCH]

+ Request (application/json)

        {
            "id": 0,
            "name": "test%20tournament",
            "style": "PDA",
            "host": "Great TD",
            "judge_criteria": {
                "judge_test_percent":100,
                "judge_repu_percent":0,
                "judge_perf_percent":0
            }
        }

+ Response 200 (application/json)

        {
            "errors": null,
            "data":
            {
                "tournament":
                {
                    "url": "test%20tournament"
                    "id": 0,
                    "name": "test%20tournament",
                    "style": "PDA",
                    "host": "Great TD",
                    "judge_criteria": {
                        "judge_test_percent":100,
                        "judge_repu_percent":0,
                        "judge_perf_percent":0
                },
                "resource_url": ""
            }
        }

### Delete Tournament [DELETE]

+ Request (application/json)

        {
            "id": 0,
            "name": "test%20tournament"
        }

+ Response 200 (application/json)

        {
            "errors": null
            "data":
            {
                "tournament":
                {
                    "url": "/v0.1/test%20tournament"
                    "id": 0,
                    "name": "test%20tournament",
                    "style": "PDA",
                    "host": "Great TD"
                },
                "resource_url": ""
            }
        }

## Available Styles [/v0.1/styles]

### List All Styles [GET]

+ Response 200 (application/json)

        {
            "errors": null,
            "data": 
            {
                "styles":
                [
                    {
                        "style_name": "PDA",
                        "debater_num_per_team": 4,
                        "team_num": 2,
                        "score_weights": [1,1,1,0.5],
                        "replies": [0,1],/* replier candidates. if 2nd speaker does reply, 1 */
                        "num_of_replies_per_team": 1
                    }
                ],
                "resource_url": ""
            }
        }

### Add An User Defined Style [PUT]

+ Request (application/json)

        {
            "style_name": "PDA",
            "debater_num_per_team": 4,
            "team_num": 2,
            "score_weights": score_weights,
            "replies": replies,
            "num_of_replies_per_team": 1
        }

+ Response 200 (application/json)

        {
            "errors": null,
            "data":
            {
                "style":
                {
                    "style_name": "PDA",
                    "debater_num_per_team": 4,
                    "team_num": 2,
                    "score_weights": score_weights,
                    "replies": replies, /* list of Integers. 1 if his/her role is reply */
                    "num_of_replies_per_team": 1
                },
                "resource_url":""
            }
        }

## Round [/v0.1/{tournament_name}/{round_num}]

### Get Round Information [GET]

+ Response 200 (application/json)

        {
            "errors":null
            "data":
            {
                "round_info":
                {
                    "round_num": 1,
                    "status": 0,
                    "constants":
                    [
                        {
                            "random_pairing":4,
                            "des_power_pairing":1,
                            "des_w_o_same_a_insti":2,
                            "des_w_o_same_b_insti":0,
                            "des_w_o_same_c_insti":0,
                            "des_with_fair_sides":1 /*property: preference(1 = most preferred)*/
                        }
                    ],
                    "constants_of_adj":
                    [
                        {
                            "random_allocation":4,
                            "des_strong_strong":2,
                            "des_with_fair_sides":3,
                            "des_avoiding_conflicts":1,
                            "des_avoiding_past":0,
                            "des_priori_bubble":0,
                            "des_chair_rotation":0,
                        }
                    ]
                },
                "resource_url": ""
            }
        }

### Send Round Config [PUT]

+ Request (application/json)

        {
            "constants": (defined above),
            "constants_of_adj": null
        }

+ Response 200 (application/json)

        {
            "errors": null,
            "data":
            {
                "round_config":
                {
                    "constants": (defined above),
                    "constants_of_adj": null
                },
                "resource_url":
            }
        }

### Proceed Round [POST]

+ Request (application/json)

        {
            "proceed": True /*Boolean*/
            "force_proceed": False /*Boolean. With false, you cannot proceed to next round until all results are collected*/
        }

+ Response 200 (application/json)

        {
            "errors": [],
            "data":
            {
                "round":{},
                "resource_url": ""
            }
        ]

## All Suggested Team Allocations [/v0.1/{tournament_name}/{round_num}/suggested_team_allocations]

+ Parameters
    + tournament_name (required, string, `test`)
    + round_num (required, number, `1`)

### Get All Suggested Team Allocations [GET]

+ Response 200 (application/json)

        {
            "errors": [],
            "data":
            {
                "candidates":
                [
                    {
                        "algorithm": "",
                        "indices": {
                            "power_pairing_indicator": 1.0, /* 1 - inf. */
                            "adapt_indicator": , /*  */
                            "adapt_indicator2": , /*  */
                            "adapt_indicator_sd": 10, /* Standard Diviation */
                            "gini_index": 0.0, /* 0-1 */
                            "scatter_indicator": 0.0 /*  */
                        },
                        "large_warings": [
                            {}
                        ],
                        "allocation": [
                            {
                                "id": 0,
                                "grids":
                                [
                                    {
                                        "id": 0,
                                        "team_ids": [0, 1],
                                        "warnings": [{}]
                                    }
                                ]
                            }
                        ]
                    }
                ],
                "resource_url": ""
            }
        }

## Team Allocation [/v0.1/{tournament_name}/{round_num}/team_allocation]

+ Parameters
    + tournament_name (required, string, `test`)
    + round_num (required, number, `1`)

### Get Team Allocation [GET]

+ Response 200 (application/json)

        {
            "errors": [],
            "data": {
                "large_warnings": [{}]
                "allocation":
                [
                    {
                        "id": 0,
                        "grids":
                        [
                            {
                                "id": 0,
                                "team_ids": [0, 1],
                                "warnings": [{}]
                            }
                        ]
                    }
                ],
                "resource_url": ""
            }
        }

### Send Team Allocation [POST]

+ Request

        [
            {
                "id": 0,
                "grids":
                [
                    {
                        "id": 0,
                        "team_ids": [0, 1],
                        "warnings": [{}]
                    }
                ]
            }
        ]

+ Response 200 (application/json)

## All Suggested Adjudicator Allocations [/v0.1/{tournament_name}/{round_num}/suggested_adjdicator_allocations]

+ Parameters
    + tournament_name (required, string, `test`)
    + round_num (required, number, `1`)

### Get All Suggested Adudicator Allocations [GET]

+ Response 200 (application/json)

        {
            "errors": [],
            "data":
            {
                "candidates":
                [
                    {
                        "algorithm": "",
                        "indices": {
                            "power_pairing_indicator": 1.0, /* 1 - inf. */
                            "adapt_indicator": , /*  */
                            "adapt_indicator2": , /*  */
                            "adapt_indicator_sd": 10, /* Standard Diviation */
                            "gini_index": 0.0, /* 0-1 */
                            "scatter_indicator": 0.0 /*  */
                        },
                        "large_warings": [
                            {}
                        ],
                        "allocation":
                        [
                            {
                                "warnings": [{}]
                                "lattice_id": 0,
                                "chairs": [
                                    {
                                        "id": 0,
                                        "name": "Adj A"
                                    },
                                "panels": [
                                    {
                                        "id": 1,
                                        "name": "Adj B"
                                    },
                                    {
                                        "id": 2,
                                        "name": "Adj C"
                                    }
                                ],
                                "trainees": []
                            }
                        ]
                    ]
                ],
                "resource_url": ""
            }
        }

## Adjudicator Allocation [/v0.1/{tournament_name}/{round_num}/adjdicator_allocation]

+ Parameters
    + tournament_name (required, string, `test`)
    + round_num (required, number, `1`)

### Get Adudicator Allocation [GET]

+ Response 200 (application/json)

        {
            "errors": [],
            "data": {
                "allocation":
                [
                    {
                        "lattice_id": 0,
                        "chairs": [
                            {
                                "id": 0,
                                "name": "Adj A"
                            },
                        "panels": [
                            {
                                "id": 1,
                                "name": "Adj B"
                            },
                            {
                                "id": 2,
                                "name": "Adj C"
                            }
                        ],
                        "trainees": []
                    }
                ],
                "resource_url": ""
            }
        }

### Send Adjudicator Allocation [POST]

+ Request

        [
            {
                "lattice_id": 0,
                "chairs": [
                    {
                        "id": 0,
                        "name": "Adj A"
                    },
                "panels": [
                    {
                        "id": 1,
                        "name": "Adj B"
                    },
                    {
                        "id": 2,
                        "name": "Adj C"
                    }
                ],
                "trainees": []
            }
        ]
        
+ Response 200 (application/json)

## Venue Allocation [/v0.1/{tournament_name}/{round_num}/venue_allocation]

+ Parameters
    + tournament_name (required, string, `test`)
    + round_num (required, number, `1`)

### Get Venue Allocation [GET]

+ Response 200 (application/json)

        {
            "errors": [],
            "data": {
                "allocation":
                [
                    {
                        "lattice_id": 0,
                        "chairs": [
                            {
                                "id": 0,
                                "name": "Adj A"
                            },
                        "panels": [
                            {
                                "id": 1,
                                "name": "Adj B"
                            },
                            {
                                "id": 2,
                                "name": "Adj C"
                            }
                        ],
                        "trainees": [],
                        "venue": {}
                    }
                ],
                "resource_url": ""
            }
        }

### Send Venue Allocation [POST]

+ Request
        
        [
            {
                "lattice_id": 0,
                "chairs": [
                    {
                        "id": 0,
                        "name": "Adj A"
                    },
                "panels": [
                    {
                        "id": 1,
                        "name": "Adj B"
                    },
                    {
                        "id": 2,
                        "name": "Adj C"
                    }
                ],
                "trainees": [],
                "venue": {}
            }
        ]
        
+ Response 200 (application/json)

## Adjudicators [/v0.1/{tournament_name}/adjudicators]

### List All Adjudicators [GET]

+ Response 200 (application/json)

        {
        }

## Specific Adjudicator [/v0.1/{tournament_name}/adjudicators/{adjudicator_name}]

### Get Specific Adjudicator [GET]

+ Response 200 (application/json)

        {
            "errors":
            "data":
            {
                "adjudicator":
                {
                    "id": adjudicator_id,
                    "name": adjudicator_name,
                    "available": adjudicator_available,
                    "instutituions": [institution],
                    "conflicts": [team],
                    "url": adjudicator_url
                },
                "resource_url": ""
            }
        }

### Create Adjudicator [POST]

+ Request (application/json)

        {
        }

+ Response 200 (application/json)

        {
        }

### Create/Update-if-exist Adjudicator [PUT]

+ Request (application/json)

        {
        }

+ Response 200 (application/json)

        {
        }

### Delete An Adjudicator [DELETE]

+ Request (application/json)

        {
        }

+ Response 200 (application/json)

        {
        }

## Teams [/v0.1/{tournament_name}/teams]

### List All Teams [GET]

+ Response 200 (application/json)

        {
        }

## Specific Team [/v0.1/{tournament_name}/teams/{team_id}]

### Get Team [GET]

+ Response 200 (application/json)

        {
            "errors": null,
            "data":
            {
                "id": id,
                "name": team_name,
                "speakers": [speaker],
                "available": team_available,
                "url": team_url
            }
        }

### Create Team [POST]

+ Request (application/json)

        {
        }

+ Response 200 (text/plain)

        "Thank you, "

### Create/Update-if-exist Team [PUT]

+ Request (application/json)

        {
        }

+ Response 200 (text/plain)

        "Thank you, "

### Update Team [PATCH]

+ Request (application/json)

        {
        }

+ Response 200 (application/json)

        {
        }

### Delete Team [DELETE]

+ Request (application/json)

        {
        }

+ Response 200 (application/json)

        {
        }

## Venues [/v0.1/{tournament_name}/venues]

### List All Venues [GET]

+ Response 200 (application/json)

        {
            "errors": null,
            "data":
            {
                [venue]
            }
        }

## Specific Venue [/v0.1/{tournament_name}/venues/{venue_id}]

### Get Venue [GET]

+ Response 200 (application/json)

        {
            "errors": null,
            "data":
            {
                "id": venue_id,
                "name": venue_name,
                "available": available,
                "priority": priority,
                "url": venue_url
            }
        }

### Create Venue [POST]

+ Request (application/json)

        {
        }

+ Response 200 (application/json)

        {
        }

### Create/Update-if-exist Venue [PUT]

+ Request (application/json)

        {
        }

+ Response 200 (application/json)

        {
        }

### Update Venue [PATCH]

+ Request (application/json)

        {
        }

+ Response 200 (application/json)

        {
            "hello": adjudicator_id
        }

### Delete Venue [DELETE]

+ Request (application/json)

        {
        }

+ Response 200 (application/json)

        {
        }

## Institutions [/v0.1/{tournament_name}/institutions]

### List All Institutions [GET]

+ Response 200 (application/json)

        {
        }

## Specific Institution [/v0.1/{tournament_name}/institutions/{institution_id}]

### Get Institution [GET]

+ Response 200 (application/json)

        {
            "errors": null,
            "data":
            {
                "id": institution_id,
                "name": institution_name,
                "url": institution_url,
                "teams": [team],
                "adjudicators": [adjudicator]
            }
        }

### Create Institution [POST]

+ Request (application/json)

        {
        }

+ Response 200 (application/json)

        {
        }

### Create/Update-if-exist Institution [PUT]

+ Request (application/json)

        {
        }

+ Response 200 (application/json)

        {
        }

### Update Institution [PATCH]

+ Request (application/json)

        {
        }

+ Response 200 (application/json)

        {
        }

### Delete Institution [DELETE]

+ Request (application/json)

        {
        }

+ Response 200 (application/json)

        {
        }

## NOTOUCHBELOW [/helloworld]

## Team Results [/v0.1/{tournament_name}/{round_num}/results/teams]

### List Team Results [GET]

+ Response 200 (application/json)

        {
            "errors": null,
            [
                {
                    "team_id": 3,
                    "team_name": "KYM1",
                    "win": 1 /* when in BP win must be points(0, 1, 2, 3), when in NA win points be (0, 1:win)*/
                }
            ]
        }

## Speaker Results [/v0.1/{tournament_name}/{round_num}/results/speakers]

### List Speaker Results [GET]

+ Response 200 (application/json)

        [
            speaker_result(defined below)
        ]

### Send Speaker Result [PUT]

+ Request (application/json)

        {
            "debater_id": 34,
            "result":
            {
                "round_num": 1,/* round1 => 1 */
                "team_id": 1,
                "points": [76, 0, 38.5], /* 0 if he/she has no role */
                "win": 1 /* in NA, 1=win, 0=lose in BP, it must be win-points the team get */,
                "opponent_team_ids": [],
                "side": "gov" /* in BP, "og", "oo", "cg", "co". in 2side game, "gov", "opp"
            }
        }

+ Response 200 (application/json)

        {
            "errors": null,
            "data":
            {
                "id": 31
            }
        }

## Adjudicator Results [/v0.1/{tournament_name}/{round_num}/results/adjudicators]

### List Adjudicator Results [GET]

+ Response 200 (application/json)

        {
            "errors": null,
            "data": undef
        }

### Send Adjudicator Result [PUT]

+ Request (application/json)

        {
            "errors": null,
            "round": 1,/* round1 => 1 */
            "data":
            {
                "from": "chair", /* "chair", "panel", or "team" */
                "from_id": 34, /* sender's id */
                "from_name": "KOYAMAR", /* sender's name */
                "chair": True,
                "adj_id": adj_id, /* id of adj to be evaluated */
                "point": 8,
                "team_ids": ::[Integer], /* teams' ids that the adj judged (必要?) */
                "comment": "worst judge ever"
            }
        }

+ Response 200 (application/json)

        {
            "errors": null,
            "data" : null
        }

## Backups [/v0.1/{tournament_name}/backups]

### List All Available Backups [GET]

+ Response 200 (application/json)

        {
            "errors":null,
            "data":
            [
                {
                    "date": "2016/01/04-23:59:10",
                    "comment": "test",
                    "backup_code": "fda23fds",
                    "round_num": 1 /* in which the backup is made */
                }
            ]
        }

### Back to Particular Point [PUT]

+ Request (application/json)

        {
            "errors": null,
            "data":
            {
                "backup_code": "fda23fds"
            }
        }

+ Response 200 (application/json)

        {
            "errors": null,
            "data": null
        }

### Save Current State [POST]

+ Request (application/json)

        {
            "errors": null,
            "data":
            {
                "comment": "backupthis"
            }
        }

+ Response 200 (application/json)

        {
            "errors":null,
            "data":
            [
                {
                    "date": "2016/01/04-23:59:10",
                    "comment": "test",
                    "backup_code": "fda23fds"
                }
            ]
        }

## Adjudicator Comments [/v0.1/{tournament_name}/{adjudicator_id}/comments]

### Download Comments on Adjudicator [GET]

+ Response 200 (application/json)

        {
            "errors":null,
            "data":
            [
                {
                    "round": 1,
                    "comments":
                    [
                        {
                            "comment": "worst judge ever",
                            "from": "team",
                            "from_id": 23,
                            "from_name": "UTK1"
                        }
                    ]
                }
            ]
        }

## All Team Results [/v0.1/{tournament_name}/results/teams]

become available when rounds finished

### Download Team Results [GET]

<--! Modify Results [POST] : not supported by current api version -->

+ Response 200 (application/json)

        {
            "errors": null,
            "data": undef
        }

## All Adjudicator Results [/v0.1/{tournament_name}/results/adjudicators]